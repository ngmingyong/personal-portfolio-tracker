// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PersonalPortfolioTracker.Data;

#nullable disable

namespace PersonalPortfolioTracker.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("PersonalPortfolioTracker.Models.CapitalChange", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CapitalChangeTypeId")
                        .HasColumnType("int")
                        .HasColumnName("capital_change_type_id");

                    b.Property<int>("ChangeInNoOfShares")
                        .HasColumnType("int")
                        .HasColumnName("change_in_no_of_shares");

                    b.Property<DateOnly>("EntitlementDate")
                        .HasColumnType("DATE")
                        .HasColumnName("entitlement_date");

                    b.Property<string>("Note")
                        .HasColumnType("longtext")
                        .HasColumnName("note");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.HasKey("Id");

                    b.HasIndex("CapitalChangeTypeId");

                    b.HasIndex("PositionId");

                    b.ToTable("capital_change");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.CapitalChangeType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("capital_change_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Increase"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Decrease"
                        });
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Dividend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("DividendPerShare")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("dividend_per_share");

                    b.Property<DateOnly>("EntitlementDate")
                        .HasColumnType("DATE")
                        .HasColumnName("entitlement_date");

                    b.Property<bool>("IsSubjectToWithholdingTax")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_subject_to_withholding_tax");

                    b.Property<int>("NoOfSharesEligible")
                        .HasColumnType("int")
                        .HasColumnName("no_of_shares_eligible");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<decimal>("WithholdingTax")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("withholding_tax");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.ToTable("dividend");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsPositionClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_position_closed");

                    b.Property<int>("NoOfSharesHeld")
                        .HasColumnType("int")
                        .HasColumnName("no_of_shares_held");

                    b.Property<DateOnly>("PositionClosedDate")
                        .HasColumnType("DATE")
                        .HasColumnName("position_closed_date");

                    b.Property<DateOnly>("PositionOpenedDate")
                        .HasColumnType("DATE")
                        .HasColumnName("position_opened_date");

                    b.Property<int>("StockId")
                        .HasColumnType("int")
                        .HasColumnName("stock_id");

                    b.Property<decimal>("TotalDividendsReceived")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_dividends_received");

                    b.Property<decimal>("TotalNetSalesProceeds")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_net_sales_proceeds");

                    b.Property<decimal>("TotalPurchaseCost")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_purchase_cost");

                    b.HasKey("Id");

                    b.HasIndex("StockId");

                    b.ToTable("position");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Stock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("code");

                    b.Property<DateOnly>("LastUpdated")
                        .HasColumnType("DATE")
                        .HasColumnName("last_updated");

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("stock");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("DATE")
                        .HasColumnName("date");

                    b.Property<int>("NoOfSharesTransacted")
                        .HasColumnType("int")
                        .HasColumnName("no_of_shares_transacted");

                    b.Property<int>("PositionId")
                        .HasColumnType("int")
                        .HasColumnName("position_id");

                    b.Property<decimal>("TotalTransactionRelatedExpenses")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("total_transaction_related_expenses");

                    b.Property<decimal>("TransactedPricePerShare")
                        .HasColumnType("decimal(65,30)")
                        .HasColumnName("transacted_price_per_share");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int")
                        .HasColumnName("transaction_type_id");

                    b.HasKey("Id");

                    b.HasIndex("PositionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("transaction");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("longtext")
                        .HasColumnName("name");

                    b.HasKey("Id");

                    b.ToTable("transaction_type");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Buy"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Sell"
                        });
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.CapitalChange", b =>
                {
                    b.HasOne("PersonalPortfolioTracker.Models.CapitalChangeType", null)
                        .WithMany()
                        .HasForeignKey("CapitalChangeTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("PersonalPortfolioTracker.Models.Position", "Position")
                        .WithMany("CapitalChanges")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Dividend", b =>
                {
                    b.HasOne("PersonalPortfolioTracker.Models.Position", "Position")
                        .WithMany("Dividends")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Position", b =>
                {
                    b.HasOne("PersonalPortfolioTracker.Models.Stock", "Stock")
                        .WithMany("Positions")
                        .HasForeignKey("StockId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stock");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Transaction", b =>
                {
                    b.HasOne("PersonalPortfolioTracker.Models.Position", "Position")
                        .WithMany("Transactions")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("PersonalPortfolioTracker.Models.TransactionType", null)
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Position");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Position", b =>
                {
                    b.Navigation("CapitalChanges");

                    b.Navigation("Dividends");

                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("PersonalPortfolioTracker.Models.Stock", b =>
                {
                    b.Navigation("Positions");
                });
#pragma warning restore 612, 618
        }
    }
}
